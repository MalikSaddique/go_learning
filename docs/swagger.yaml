definitions:
  models.User:
    type: object
host: localhost:8002
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Testing Swagger APIs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: File Analyzer APIs
  version: "1.0"
paths:
  /getdata/{user_id}:
    get:
      description: Retrieves analyzed text data from the database for the given user
        ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Result data retrieved
        "404":
          description: Result not found
        "500":
          description: Database connection failed
      security:
      - BearerAuth: []
      summary: Get Analysis Result
      tags:
      - protected
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      summary: Login a user
      tags:
      - auth
  /protected:
    get:
      description: Requires JWT. Analyzes a text file and saves the result to the
        database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Protected endpoint for saving analyzed data
      tags:
      - protected
  /refresh:
    get:
      description: Validates refresh token and generates a new access token
      produces:
      - application/json
      responses:
        "200":
          description: Returns new access token
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Refresh Access Token
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Register a new user
      tags:
      - auth
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
